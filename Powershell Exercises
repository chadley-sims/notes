Practical Exercise #1 -  Find Cmdlets

1. Ensure that you have the latest copy of help by updating your help system.

2. Which cmdlets deal with the viewing/manipulating of processes?
  - Get-Process, Start/Stop-Process

3. Display a list of services installed on your local computer.
  - Get-Service

4.  What cmdlets are used to write or output objects or text to the screen?
  - Write-Host or Write-Ouput (can be put through a pipeline)

5. What cmdlets can be used to create, modify, list, and delete variables?
  - Get-Variable, Remove-Variable, Test-Path, $<> = 

6. What cmdlet can be used, other than Get-Help, to find and list other cmdlets?
  - Get-Command

7. Find the cmdlet that is used to prompt the user for input.
  - Read-Host

Practical Exercise #2 - Running Cmdlets 

    1. Display a list of running processes.
  - Get-Process

    2. Display a list of all running processes that start with the letter "s".
  - Get-Process -Name s*

    3. Find the cmdlet and its purpose for the following aliases:

        gal - Get-Alias

        dir - Get-ChildItem

        echo - Write-Output

        ? - Where-Object

        % - ForEach-Object

        ft - Format-Table

    4. Display a list of Windows Firewall Rules.
  - Get-NetFirewallRule

    5. Create a new alias called "gh" for the cmdlet "Get-Help"
  - Set-Alias gh -Value Get-Help

Practical Exercise #3 - Variables

    1. Create a variable called "var1" that holds a random number between 25-50.
  - $var1 = Get-Random -Minimum 25 -Maximum 50

    2. Create a variable called "var2" that holds a random number between 1-10.
  - $var2 = Get-Random -Minimum 1 -Maximum 10

    3. Create a variable called "sum" that holds the sum of var1 and var2.
  - $sum = $var1 + $var2

    4. Create a variable called "sub" that holds the difference of var1 and var2.
  - $sub = $var1 - $var2

    5. Create a variable called "prod" that holds the product of var1 and var2.
  - $prod = $var1 * $var2

    6. Create a variable called "quo" that holds the quotient of var1 and var2.
  - $quo = $var1 / $var2

    7. Replace the variables in text with their values in the following format:

        "var1" + "var2" = "sum"

    8. Replace the variables in text with their values in the following format:

        "var1" - "var2" = "sub"

    9. Replace the variables in text with their values in the following format:

        "var1" * "var2" = "prod"

    10. Replace the variables in text with their values in the following format:

        "var1" / "var2" = "quo"

$var1 = Get-Random -Minimum 25 -Maximum 50
$var2 = Get-Random -Minimum 1 -Maximum 10
$sum = $var1 + $var2
$sub = $var1 - $var2
$prod = $var1 * $var2
$quo = $var1 / $var2
Write-Output "$var1 + $var2 = $sum"
Write-Output "$var1 - $var2 = $sub"
Write-Output "$var1 * $var3 = $prod"
Write-Output "$var1 / $var2 = $quo"


Practical Exercise #4 - The Pipeline

  

    1. Display the start time of the earliest and latest running processes
-  Get-Process | Where-Object processname -ne "Idle" | Sort-Object -property starttime | fl processname, starttime

    2. Identify a cmdlet that returns the current date and time then using this cmdlet and Select-object, display only the current day of the week
- (Get-Date).DayOfWeek

    3. Identify a cmdlet that displays a list of installed hotfixes.
- Get-Hotfix

    4. Extend the expression to sort the list by install date, and display only the install date and hotfix ID.
-  Get-HotFix | Sort-Object InstalledOn | fl InstalledOn, HotFixID

    5. Extend the expression further, but this time sort by description, include description, hotfix ID, and install Date.
-  Get-HotFix | Sort-Object Description | fl Description, HotFixID, InstalledOn


Practical Exercise #5 - Custom Object

Create a custom object that contains information about the host system using the following:

    Win32_ComputerSystem

    Win32_BIOS

    Win32_OperatingSystem

    Win32_LogicalDisk

ANSWER : $WMIObject = [PSCustomObject]@{
    "ComputerName" = "DESKTOP-5KJDVS2"
    "OperatingSystem" = "Microsoft Windows 10 Pro"
    "Version" = "10.0.17134"
    "Manufacturer" = "Dell Inc."
    "Disks" = "{\\DESKTOP-5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID=C:,\\DESKTOP-5KJDVS2\root\cimv2:Win32_LogicalDisk.DeviceID=D:}"
}


Practical Exercise #6 - Comparison and Condition

    Find and extract the model number from the provided lines of text. If there isn’t a model number then display to the user that a model number wasn’t found

    Check both lines for model numbers and report individually the line and model number if found.

ANSWER: if ($line1 -match $reg) {
    $matches
} elseif ($line2 -match $reg) {
    $matches
} else {
    Write-Host "Model Number Not Found"
}
