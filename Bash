What is Bash?
----------------
  - Acronym for bourne-again shell
  - Based on IEEE POSIX (1003.1) spec
  - Shell - A shell is a macro processor that executed commands.
    1. Command interpreter
    2. Programming language


Linux commands/shortcuts
-----------------------------
  - Ctrl+P goes to previous command in command history
  - Ctrl+A will bring you to the beginning of the line
  - Ctrl+E will bring you to the end of the line
  - Ctrl+U cuts what you have in text field from your cursor back and puts it in your clipboard
  - Ctrl+Y will paste the thing from your clipboard
  - Ctrl+C bring you to a new line
  - Ctrl+R lets you search for commands youve entered previously
  - Ctrl+L clears screen
  - / lets you search for a word in a man page ( N key lets you go to the next match )
  - History shows you your command history
  - Man(ual) pages give you more information on each command in linux; sometimes too much


Symbolic and Hard links
----------------------------
  - For soft links, if the source file is deleted, the linked file will be too
  - For hard links, the linked file will stay with the content it got from the source file.


Find command
-------------
  - 'Find' command lets you find a certain folder or file in a file system
  - '-iname' lets you search for things while being case insensitive
  - The first field of the find command is where you want to search
  - '-inum' searches for files by inode number
  - If you use '2>/dev/null', you can hide all the permission denied's
  - Can do '-name *.txt' to find all text files in a file system, can also be done as 'militaryplans.*'
  - -empty looks for empty files
  - can use '-mtime, ctime, or atime', to filter by modified time, change time, or access time, respectively, to filter everything from monitor to now
  - 'find / -type d -iname log -exec ls -l {} \; 2>/dev/null' lets you look for directories with log in the name
  - 'find /var/log -iname *.log -exec ls -a {} \; 2>/dev/null' lets you find log files themselves
  - 'find /var/log -iname */log 2>dev/null printf "%i %f %f/n"' don't quite know what this does yet
  - 'Touch file{1..10}.txt'


Max and Min depth
--------------------
  - You can use these commands to search a file system a certain amount of layers (folders) deep.
  - For example: 'find / -maxdepth 2' will look two folders deep


Grep and egrep
-----------------
  - 'grep' can be used to search the results of a previous command (Ex: 'cat /etc/passwd | grep bin/bash')
  - 'egrep' is the extended version, lets you utilize REGEX (Ex: 'egrep "student|root|randomuser" /etc/passwd')
  - -C provides three lines above and below the output
  - -A shows output and three lines after
  - -B shows output and three lines before
  - 'ps --forest' shows a process tree in parent-child format


Cut ( does NOT edit file in any way )
-----
  - allows you to cut out certain information from output
  - 'more /etc/passwd | cut -d: -f1' allows you to cut out the first field from the /etc/passwd file
  - 'more /etc/passwd | cut -d: -f3-' shows the third field on from /etc/passwd
  - 'more /etc/passwd | cut -d: -f3-4' shows a range of fields from /etc/passwd delimited by the range of numbers after the -f   
  - -c allows you to see certain characters




Ls'ing directory tricks
--------------------------

    Using only the ls -l and cut Commands, write a BASH script that shows all filenames with extensions ie: 1.txt, etc., but no directories, in $HOME/CUT.
    Write those to a text file called names in $HOME/CUT directory.
    Omit the names filename from your output.

    {  ls -p "$HOME/CUT" | grep -v "/$" | grep -v "names" > "$HOME/CUT/names"  }

    ## identifies each directory in ls and then grep's it out. Then it greps the names file out of the output. Then directs it to the names.txt file


Brace Expansion
-----------------
  - 'touch {1..5}.txt' this will create text files 1 through 5
  - runs the command on the whole list of items delimited by the curly braces


Awk 
-------
  - -F for delimiting
  - 'tail passwd | awk -F: '{print $1}'' shows us the first field of the passwd file
  - you can do '{print $1,$3}' to show both the first and the third field of a file
  - $NF = number of fields; prints out the last field of every instance in the file, no matter how many fields there are
  - $OFS = output field separator; will replace the default space seperator with whatever you want
  - Syntax for above is: tail passwd | awk -F: 'BEGIN {OFS="#"}{print $1,$3,$6}'
  - 'cat passwd | awk -F: '($3 >= 150){print $0}' will show each line that has a value greater than 150 in their third field
  - if you replace the $0 with a $3, then it will show the value that is greater than 150, instead of the whole line
  - awk -v myvar=$(sed -i 's/root/groot/g' $HOME/passwd) -F: '{OFS=":"}{$1=myvar; print}' ; this command will replace root with groot my utilizing a variable i guess. idk.
  - B='cat /etc/passwd' just saves the command as a string, and doesn't actually run it
  - B=$(cat /etc/passwd) however, does run the cat command on the passwd file



Sed
-----
  - Must use 's' (substitute) to make changes to a file(Ex: sed 's/home/nobodyhome/' passwd)
  - If you use 'g' at the end, it will replace every instance of 'home' with 'nobodyhome', globally (set 's/home/nobodyhome/g' passwd)
  - sed can be used to delete lines: sed '/home/d' passwd (deleted every instance with home in it)
  - sed -e '/xrdp/d' -e '/telnetd/d' passwd (deleted multiple lines from passwd file)
  - can use sort and uniq to sort through based on different factors 
  - sort -n  = alphanumeric values
  - sort = alphabetical
  - uniq = shows only one of each


Special parameters in Bash (read only) ( Bash equivalent to a variable are parameters )
-------------------------
  - Number of arguments passed: $#
  - Script name is: $0
  - 2nd argument passed is: $2
  - Arguments passed to script are: $*
  - Exit status of last command that executed: $? This is the previous command for $_
  - Last argument to provide to previous command: $_
  - PID of current shell is: $$
  - Flags are set in the shell: $-
  - The process ID of the most recent background job: $!


Loops
-------
  - For loop ( for x in ___ \n do _____ ) 
  - While loop ( 
