    1 #!/usr/bin/env python3
    2 
    3 def q1(floatstr):
    4   floatstr = floatstr.split(',')
    5   floatstr = [float(i) for i in floatstr]
    6   return floatstr
    7 
    8 
    9   '''
   10   TLO: 112-SCRPY002, LSA 3,4
   11   Given the floatstr, which is a comma separated string of
   12   floats, return a list with each of the floats in the 
   13   argument as elements in the list.    '''
   14   pass
   15 
   16 def q2(*args):
   17     my_sum = 0
   18     for x in args:
   19         my_sum += x
   20     new_sum = my_sum / len(args)
   21     return float(new_sum)
   22     '''
   23     TLO: 112-SCRPY006, LSA 3
   24     TLO: 112-SCRPY007, LSA 4
   25     Given the variable length argument list, return the average
   26     of all the arguments as a float
   27     '''
   28     pass
   29 
   30 def q3(lst,n):
   31     new_List = lst[-n:]
   32     return new_List
   33 
   34 
   35 
   36     '''
   37     TLO: 112-SCRPY004, LSA 3
   38     Given a list (lst) and a number of items (n), return a new 
   39     list containing the last n entries in lst.
   40     '''
   41     pass
   42 
   43 def q4(strng):
   44     MyList = []
   45     SecondList = []
   46     for letter in strng:
   47         MyList.append(letter)
   48     for x in MyList:
   49         SecondList.append(ord(x))
   50     return SecondList
   51 
   52 
   53 
   54 
   55     '''
   56     TLO: 112-SCRPY004, LSA 1,2
   57     TLO: 112-SCRPY006, LSA 3
   58     Given an input string, return a list containing the ordinal numbers of 
   59     each character in the string in the order found in the input string.
   60     '''
   61     pass
   62 
   63 def q5(strng):
   64     MyList = []
   65     strng = strng.split()
   66     for x in strng:
   67         MyList.append(x)
   68     return tuple(MyList)
   69 
   70     '''
   71     TLO: 112-SCRPY002, LSA 1,3
   72     TLO: 112-SCRPY004, LSA 2
   73     Given an input string, return a tuple with each element in the tuple
   74     containing a single word from the input string in order.
   75     '''
   76     pass
   77 
   78 def q6(catalog, order):
   79 
   80 
   84 
   85     '''
   86      TLO: 112-SCRPY007, LSA 2
   87     Given a dictionary (catalog) whose keys are product names and values are product
   88       prices per unit and a list of tuples (order) of product names and quantities,
   89      compute and return the total value of the order.
   90    
   91       Example catalog:
   92       {
   93          'AMD Ryzen 5 5600X': 289.99,
   94          'Intel Core i9-9900K': 363.50,
   95          'AMD Ryzen 9 5900X': 569.99
   96       }
   97    
   98      Example order:
   99       [
  100           ('AMD Ryzen 5 5600X', 5),
  101           ('Intel Core i9-9900K', 3)
  102       ]
  103   
  104       Example result:
  105       2540.45 
  106   
  107       How the above result was computed:
  108       (289.99 * 5) + (363.50 * 3)
  109     '''
  110     pass
  111 
  112 def q7(filename):
  113     with open(filename, 'r') as fp:
  114         first_line = fp.readline()
  115         return len(first_line.replace("\n", ''))
  116 
  117     '''
  118     TLO: 112-SCRPY005, LSA 1
  119     Given a filename, open the file and return the length of the first line 
  120     in the file excluding the line terminator.
  121     '''
  122     pass
  123 
  124 def q8(filename,lst):
  125     with open(filename, 'w') as fp:
  126         for x in lst:
  127             if x == "stop":
  128                 break
  129             fp.write(x+"\n")
  130     '''
  131     TLO: 112-SCRPY003, LSA 1
  132     TLO: 112-SCRPY004, LSA 1,2
  133     TLO: 112-SCRPY005, LSA 1
  134     Given a filename and a list, write each entry from the list to the file
  135     on separate lines until a case-insensitive entry of "stop" is found in 
  136     the list. If "stop" is not found in the list, write the entire list to 
  137     the file on separate lines.
