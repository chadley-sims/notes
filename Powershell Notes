Command for windows : xfreerdp /u:student /v:x.x.x.x -dynamic-resolution +glyph-cache +clipboard

Basics
-----------
- Powershell searches for command in the order: Alias, Function, and then Cmdlet
- 'Get-help' will give you the command page for help, teaching you how to get help most efficiently
- 'Get-Help <cmdlet> -online' will bring you to the microsoft page online for that cmdlet
- 'Set-Alias' will make an alias that you declare
- 'Get-Alias -Defintion <Cmdlet>' will show you all the alias's for that specific cmdlet
- '(Get-Process)[0]' shows you the object in the array with that index number
- '(Get-Process <process>).kill' will kill the named process
- '((Get-Process)[index]).kill()' will kill the process marked by the index position
- Get-Command = tells you the cmdlets you can use
- Get-Verb = tells you all the verbs you can use
- Get-Command -Noun <noun> = tell you all the nouns you can use with that keyword


Pipes
----------
- The pipeline takes each thing in an array and runs the next cmdlet against each one
- The pipe variable is what is used to iterate
- $cols = @{Label="KB"; Expression = { [int]($_.Length/1KB) } }
Get-ChildItem | Format-Table Name, $cols
    - shows the KB usage of each process
- Must use the Pipe operator ( | )
- Write-Host can send the info straight to the user, while Write-Output must be used to be used in the pipeline


Variables
------------
- Assign variables with $ 
- Test-Path to test a variable
- Single qoutes will take a string literal, while double will print the value a variable holds
- $hour = (Get-Date).Hour ## Uses the hour of the day from Get-Date cmdlet
$remain = 24 - $hour
    - Shows how many hours are left in the day using variables


Automatic Variables
-----------------------
- Variables that are already made from the system and cannot be changed (ex. '$_' means the variable that is held by the pipeline)
- List of them can be found on the PNS COSC page for Powershell


Data Types
------------
- (cmdlet).GetType() shows the data type of a cmdlet
- $var = [int32](read-host) will take an input from the user and turn it into an integer


Script Blocks
---------------
- Annotated with {}
- To call a script block, use the & symbol
- to do command substitution, use nothing to cover the code inside a variable
- to print a command, use {} to cover it


Sorting
-----------
- Get-Process | Group-Object {$_.Name.Substring(0,1).ToUpper()} | ForEach-Object {($_.Name + " ") *7; "========"; $_.Group} 
        - Will sort and format processes by Alphabetical order, and put them in a letter group
- Get-Variable | fl *
        - Shows you options for your variables
- Get-Service | Where-Object{$_.Status -eq 'running'}
        - Find running service
-  Get-Process | Where-Object processname -ne "Idle" | Sort-Object starttime | Select-Object -last 10 | fl processname, starttime
        - Shows Processes and their start times
- Select-Object must be used to pipe data, not format table/list


Counting
--------
- Total number of files from a command, use Measure-Object
- Can use -Average, -Maximum, -Minimum, -Sum
- $array = 1, 2, 3, 4, 5
  $sum = 0
  $array | ForEach-Object { $sum += $_ }
        - Sum equals 15


Objects
-----------
- make an object by doing '$myobject = New-Object object
- edit an object by doing 'Add-Member -MemberType NoteProperty -Name Color -value Red -InputObject $MyTruck'
- $soldier = [PSCustomObject]@{
    "Firstname" = "Joe"
    "LastName" = "Snuffy"
    "MilitaryRank" = "SSG"
    "MOST" = "17C" 
    "Position" = "Host Analyst"
}
        - Another way to make an object; won't do methods
- Add-Member -MemberType ScriptMethod -InputObject $Mytruck -Name Drive -Value { "Going on a roadtrip" }
        - For adding methods to objects
- 
